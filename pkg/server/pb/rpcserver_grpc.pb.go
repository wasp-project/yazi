// Copyright 2024 mlycore. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpcserver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCServer_Set_FullMethodName = "/pb.RPCServer/Set"
	RPCServer_Get_FullMethodName = "/pb.RPCServer/Get"
)

// RPCServerClient is the client API for RPCServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCServerClient interface {
	Set(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error)
	Get(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error)
}

type rPCServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCServerClient(cc grpc.ClientConnInterface) RPCServerClient {
	return &rPCServerClient{cc}
}

func (c *rPCServerClient) Set(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error) {
	out := new(KVResponse)
	err := c.cc.Invoke(ctx, RPCServer_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServerClient) Get(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error) {
	out := new(KVResponse)
	err := c.cc.Invoke(ctx, RPCServer_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServerServer is the server API for RPCServer service.
// All implementations must embed UnimplementedRPCServerServer
// for forward compatibility
type RPCServerServer interface {
	Set(context.Context, *KVRequest) (*KVResponse, error)
	Get(context.Context, *KVRequest) (*KVResponse, error)
	mustEmbedUnimplementedRPCServerServer()
}

// UnimplementedRPCServerServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServerServer struct {
}

func (UnimplementedRPCServerServer) Set(context.Context, *KVRequest) (*KVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRPCServerServer) Get(context.Context, *KVRequest) (*KVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRPCServerServer) mustEmbedUnimplementedRPCServerServer() {}

// UnsafeRPCServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServerServer will
// result in compilation errors.
type UnsafeRPCServerServer interface {
	mustEmbedUnimplementedRPCServerServer()
}

func RegisterRPCServerServer(s grpc.ServiceRegistrar, srv RPCServerServer) {
	s.RegisterService(&RPCServer_ServiceDesc, srv)
}

func _RPCServer_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCServer_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServerServer).Set(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCServer_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServerServer).Get(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCServer_ServiceDesc is the grpc.ServiceDesc for RPCServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RPCServer",
	HandlerType: (*RPCServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _RPCServer_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RPCServer_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcserver.proto",
}
